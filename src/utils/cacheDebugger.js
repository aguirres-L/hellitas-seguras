// Utilidad para debugging del cache de consejos IA
// Uso: importar en la consola del navegador o usar en desarrollo

import { aiService } from '../services/aiService';

export const cacheDebugger = {
  // Inspeccionar el cache actual
  inspeccionar() {
    console.log('üîç Inspeccionando cache de consejos IA...');
    aiService.inspeccionarCache();
  },

  // Detectar si el cache est√° corrupto
  detectarCorrupcion() {
    console.log('üîç Detectando corrupci√≥n del cache...');
    const corrupto = aiService.detectarCacheCorrupto();
    console.log(corrupto ? '‚ùå Cache corrupto detectado' : '‚úÖ Cache en buen estado');
    return corrupto;
  },

  // Obtener estad√≠sticas del cache
  estadisticas() {
    console.log('üìä Estad√≠sticas del cache:');
    const stats = aiService.obtenerEstadisticasCache();
    console.log(stats);
    return stats;
  },

  // Limpiar cache corrupto
  limpiarCorrupto() {
    console.log('üßπ Limpiando cache corrupto...');
    aiService.limpiarCacheCorrupto();
    console.log('‚úÖ Cache limpiado');
  },

  // Migrar cache corrupto
  migrar() {
    console.log('üîÑ Migrando cache corrupto...');
    aiService.migrarCacheCorrupto();
    console.log('‚úÖ Migraci√≥n completada');
  },

  // Limpiar todo el cache
  limpiarTodo() {
    console.log('üóëÔ∏è Limpiando todo el cache...');
    aiService.limpiarCache();
    console.log('‚úÖ Cache completamente limpiado');
  },

  // Verificar estructura de localStorage
  verificarLocalStorage() {
    console.log('üîç Verificando localStorage...');
    try {
      const stored = localStorage.getItem('consejos_ia_cache');
      if (!stored) {
        console.log('‚ùå No hay datos en localStorage');
        return;
      }

      const parsed = JSON.parse(stored);
      console.log('Tipo de datos:', Array.isArray(parsed) ? 'Array' : typeof parsed);
      console.log('Longitud:', Array.isArray(parsed) ? parsed.length : 'N/A');
      
      if (Array.isArray(parsed) && parsed.length > 0) {
        console.log('Primera entrada:', parsed[0]);
        
        // Verificar si hay anidamiento excesivo
        const primeraEntrada = parsed[0];
        if (primeraEntrada && primeraEntrada[1] && primeraEntrada[1].data && typeof primeraEntrada[1].data === 'object' && primeraEntrada[1].data.data) {
          console.warn('‚ö†Ô∏è Estructura anidada detectada (mu√±ecas rusas)');
        } else {
          console.log('‚úÖ Estructura correcta');
        }
      }
    } catch (error) {
      console.error('‚ùå Error verificando localStorage:', error);
    }
  },

  // Verificar freno de peticiones
  verificarFreno(userId, mascotaId) {
    console.log('üîí Verificando freno de peticiones...');
    const estado = aiService.verificarFrenoPeticiones(userId, mascotaId);
    console.log('Estado del freno:', estado);
    return estado;
  },

  // Diagn√≥stico completo
  diagnosticoCompleto(userId = null, mascotaId = null) {
    console.log('üè• === DIAGN√ìSTICO COMPLETO DEL CACHE ===');
    
    console.log('\n1. Verificando localStorage...');
    this.verificarLocalStorage();
    
    console.log('\n2. Detectando corrupci√≥n...');
    const corrupto = this.detectarCorrupcion();
    
    console.log('\n3. Estad√≠sticas del cache...');
    this.estadisticas();
    
    if (userId && mascotaId) {
      console.log('\n4. Verificando freno de peticiones...');
      this.verificarFreno(userId, mascotaId);
    }
    
    if (corrupto) {
      console.log('\n5. ‚ö†Ô∏è Cache corrupto detectado. Ejecutando migraci√≥n...');
      this.migrar();
      
      console.log('\n6. Verificando despu√©s de migraci√≥n...');
      this.estadisticas();
    } else {
      console.log('\n5. ‚úÖ Cache en buen estado');
    }
    
    console.log('\nüè• === DIAGN√ìSTICO COMPLETADO ===');
  }
};

// Funci√≥n global para usar en la consola del navegador
if (typeof window !== 'undefined') {
  window.debugCache = cacheDebugger;
  console.log('üõ†Ô∏è Debugger de cache disponible como window.debugCache');
  console.log('Comandos disponibles:');
  console.log('- debugCache.diagnosticoCompleto() - Diagn√≥stico completo');
  console.log('- debugCache.inspeccionar() - Inspeccionar cache');
  console.log('- debugCache.limpiarCorrupto() - Limpiar cache corrupto');
  console.log('- debugCache.limpiarTodo() - Limpiar todo el cache');
}
